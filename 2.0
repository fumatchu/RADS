WORKING CONFIG

#!/usr/bin/env bash
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[1;33m"
TEXTRESET="\033[0m"
CYAN="\e[36m"
RESET="\e[0m"
USER=$(whoami)
MAJOROS=$(cat /etc/redhat-release | grep -Eo "[0-9]" | sed '$d')


clear
echo -e "[${GREEN}SUCCESS${TEXTRESET}] Rocky ${CYAN}RADS FOREST${TEXTRESET} Builder ${YELLOW}Installation${TEXTRESET}"

# Checking for user permissions
if [ "$USER" = "root" ]; then
  echo -e "[${GREEN}SUCCESS${TEXTRESET}] Running as root user"
  sleep 2
else
  echo -e "[${RED}ERROR${TEXTRESET}] This program must be run as root."
  echo "Exiting..."
  exit 1
fi

# Checking for version information
if [ "$MAJOROS" -ge 9 ]; then
  echo -e "[${GREEN}SUCCESS${TEXTRESET}] Detected compatible OS version: Rocky 9.x or greater"
  sleep 2
else
  echo -e "[${RED}ERROR${TEXTRESET}] Sorry, but this installer only works on Rocky 9.X or greater"
  echo -e "Please upgrade to ${GREEN}Rocky 9.x${TEXTRESET} or later"
  echo "Exiting the installer..."
  exit 1
fi

# ========= REMOVE BRACKETED PASTING =========
sed -i '8i set enable-bracketed-paste off' /etc/inputrc


# ========= INSERT INSTALLER INTO .bash_profile =========
PROFILE="/root/.bash_profile"
BACKUP="/root/.bash_profile.bak.$(date +%Y%m%d%H%M%S)"
INSTALLER="/root/ADDCInstaller/DCInstall.sh"

cat << 'EOF' >> "$PROFILE"

## Run KVM installer on every interactive login ##
if [[ $- == *i* ]]; then
  /root/ADDCInstaller/DCInstall.sh
fi
EOF
if [[ -f "$INSTALLER" ]]; then
  chmod +x "$INSTALLER"
else
  echo "WARNING: Installer not found at $INSTALLER"
fi


# ========= VALIDATION HELPERS =========
validate_cidr() { [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$ ]]; }
validate_ip()   { [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; }
validate_fqdn() { [[ "$1" =~ ^[a-zA-Z0-9-]+(\.[a-zA-Z0-9-]+)+$ ]]; }

is_host_ip() {
  local cidr="$1"
  local ip_part="${cidr%/*}"
  local mask="${cidr#*/}"

  IFS='.' read -r o1 o2 o3 o4 <<< "$ip_part"
  ip_dec=$(( (o1 << 24) + (o2 << 16) + (o3 << 8) + o4 ))

  netmask=$(( 0xFFFFFFFF << (32 - mask) & 0xFFFFFFFF ))
  network=$(( ip_dec & netmask ))
  broadcast=$(( network | ~netmask & 0xFFFFFFFF ))

  [[ "$ip_dec" -eq "$network" || "$ip_dec" -eq "$broadcast" ]] && return 1 || return 0
}

check_hostname_in_domain() {
  local fqdn="$1"
  local hostname="${fqdn%%.*}"
  local domain="${fqdn#*.}"
  [[ ! "$domain" =~ (^|\.)"$hostname"(\.|$) ]]
}
isValidIP() {
  [[ $1 =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]] || return 1
  IFS=. read -r o1 o2 o3 o4 <<< "$1"
  (( o1 <= 255 && o2 <= 255 && o3 <= 255 && o4 <= 255 )) || return 1
  return 0
}

isValidNetmask() {
  local valid=(
    255.255.255.0 255.255.0.0 255.0.0.0
    255.255.254.0 255.255.252.0 255.255.248.0 255.255.240.0
    255.255.224.0 255.255.192.0 255.255.128.0
  )
  [[ " ${valid[*]} " =~ " $1 " ]]
}

isIPInRange() {
  local ip=$1
  local ipnum=$(ipToNumber "$ip")
  local netnum=$(ipToNumber "$NETWORK")
  local broadnum=$(ipToNumber "$BROADCAST")
  [[ $ipnum -ge $netnum && $ipnum -le $broadnum ]]
}

# ========= SYSTEM CHECKS =========
check_root_and_os() {
  if [[ "$EUID" -ne 0 ]]; then
    dialog --aspect 9 --title "Permission Denied" --msgbox "This script must be run as root." 7 50
    clear; exit 1
  fi

  if [[ -f /etc/redhat-release ]]; then
    MAJOROS=$(grep -oP '\d+' /etc/redhat-release | head -1)
  else
    dialog --title "OS Check Failed" --msgbox "/etc/redhat-release not found. Cannot detect OS." 7 50
    exit 1
  fi

  if [[ "$MAJOROS" -lt 9 ]]; then
    dialog --title "Unsupported OS" --msgbox "This installer requires Rocky Linux 9.x or later." 7 50
    exit 1
  fi
}

# ========= SELINUX CHECK =========
check_and_enable_selinux() {
  local current_status=$(getenforce)

  if [[ "$current_status" == "Enforcing" ]]; then
    dialog --title "SELinux Status" --infobox "SELinux is already enabled and enforcing." 6 50
    sleep 4
  else
    dialog --title "SELinux Disabled" --msgbox "SELinux is not enabled. Enabling SELinux now..." 6 50
    sed -i 's/SELINUX=disabled/SELINUX=enforcing/' /etc/selinux/config
    setenforce 1

    if [[ "$(getenforce)" == "Enforcing" ]]; then
      dialog --title "SELinux Enabled" --msgbox "SELinux has been successfully enabled and is now enforcing." 6 50
    else
      dialog --title "SELinux Error" --msgbox "Failed to enable SELinux. Please check the configuration manually." 6 50
      exit 1
    fi
  fi
}

# ========= NETWORK DETECTION =========
detect_active_interface() {
  dialog --title "Interface Check" --infobox "Checking active network interface..." 5 50
  sleep 3

  # Attempt 1: Use nmcli to find connected Ethernet
  INTERFACE=$(nmcli -t -f DEVICE,TYPE,STATE device | grep "ethernet:connected" | cut -d: -f1 | head -n1)

  # Attempt 2: Fallback to any interface with an IP if nmcli fails
  if [[ -z "$INTERFACE" ]]; then
    INTERFACE=$(ip -o -4 addr show up | grep -v ' lo ' | awk '{print $2}' | head -n1)
  fi

  # Get the matching connection profile name
  if [[ -n "$INTERFACE" ]]; then
    CONNECTION=$(nmcli -t -f NAME,DEVICE connection show | grep ":$INTERFACE" | cut -d: -f1)
  fi

  # Log to /tmp in case of failure
  echo "DEBUG: INTERFACE=$INTERFACE" >> /tmp/kvm_debug.log
  echo "DEBUG: CONNECTION=$CONNECTION" >> /tmp/kvm_debug.log

  if [[ -z "$INTERFACE" || -z "$CONNECTION" ]]; then
    dialog --clear  --no-ok --title "Interface Error" --aspect 9 --msgbox "No active network interface with IP found. Check /tmp/kvm_debug.log for d
etails." 5 70
    exit 1
  fi

  export INTERFACE CONNECTION
}

# ========= STATIC IP CONFIG =========
prompt_static_ip_if_dhcp() {
  IP_METHOD=$(nmcli -g ipv4.method connection show "$CONNECTION" | tr -d '' | xargs)

  if [[ "$IP_METHOD" == "manual" ]]; then
  dialog --clear --title "Static IP Detected" --infobox "Interface '$INTERFACE' is already using a static IP.\nNo changes needed." 6 70
  sleep 3
  return
elif [[ "$IP_METHOD" == "auto" ]]; then
    while true; do
      while true; do
        IPADDR=$(dialog --title "Static IP" --inputbox "Enter static IP in CIDR format (e.g., 192.168.1.100/24):" 8 60 3>&1 1>&2 2>&3)
        validate_cidr "$IPADDR" && break || dialog --msgbox "Invalid CIDR format. Try again." 6 40
      done

      while true; do
        GW=$(dialog --title "Gateway" --inputbox "Enter default gateway:" 8 60 3>&1 1>&2 2>&3)
        validate_ip "$GW" && break || dialog --msgbox "Invalid IP address. Try again." 6 40
      done

      while true; do
        DNSSERVER=$(dialog --title "DNS Server" --inputbox "Enter Upstream DNS server IP:" 8 60 3>&1 1>&2 2>&3)
        validate_ip "$DNSSERVER" && break || dialog --msgbox "Invalid IP address. Try again." 6 40
      done

      while true; do
        HOSTNAME=$(dialog --title "FQDN" --inputbox "Enter FQDN (e.g., host.domain.com):" 8 60 3>&1 1>&2 2>&3)
        if validate_fqdn "$HOSTNAME" && check_hostname_in_domain "$HOSTNAME"; then break
        else dialog --msgbox "Invalid FQDN or hostname repeated in domain. Try again." 7 60
        fi
      done

      while true; do
        DNSSEARCH=$(dialog --title "DNS Search" --inputbox "Enter domain search suffix (e.g., localdomain):" 8 60 3>&1 1>&2 2>&3)
        [[ -n "$DNSSEARCH" ]] && break || dialog --msgbox "Search domain cannot be blank." 6 40
      done

      dialog --title "Confirm Settings" --yesno "Apply these settings?\n\nInterface: $INTERFACE\nIP: $IPADDR\nGW: $GW\nFQDN: $HOSTNAME\nDNS: $DNSSERVER\nSearch: $DNSSEARCH" 12 60

      if [[ $? -eq 0 ]]; then
        nmcli con mod "$CONNECTION" ipv4.address "$IPADDR"
        nmcli con mod "$CONNECTION" ipv4.gateway "$GW"
        nmcli con mod "$CONNECTION" ipv4.method manual
        nmcli con mod "$CONNECTION" ipv4.dns "$DNSSERVER"
        nmcli con mod "$CONNECTION" ipv4.dns-search "$DNSSEARCH"
        hostnamectl set-hostname "$HOSTNAME"


        dialog --clear --no-shadow --no-ok --title "Reboot Required" --aspect 9 --msgbox "Network stack set. The System will reboot. Reconnect at: ${IPADDR%%/*}" 5 95
        reboot
      fi
    done
  fi
}

# ========= UI SCREENS =========
show_welcome_screen() {
  clear
  echo -e "${GREEN}
                               .*((((((((((((((((*
                         .(((((((((((((((((((((((((((/
                      ,((((((((((((((((((((((((((((((((((.
                    (((((((((((((((((((((((((((((((((((((((/
                  (((((((((((((((((((((((((((((((((((((((((((/
                .(((((((((((((((((((((((((((((((((((((((((((((
               ,((((((((((((((((((((((((((((((((((((((((((((((((.
               ((((((((((((((((((((((((((((((/   ,(((((((((((((((
              /((((((((((((((((((((((((((((.        /((((((((((((*
              ((((((((((((((((((((((((((/              ((((((((((
              ((((((((((((((((((((((((                   *((((((/
              /((((((((((((((((((((*                        (((((*
               ((((((((((((((((((             (((*            ,((
               .((((((((((((((.            /(((((((
                 ((((((((((/             (((((((((((((/
                  *((((((.            /((((((((((((((((((.
                    *(*)            ,(((((((((((((((((((((((,
                                 (((((((((((((((((((((((/
                              /((((((((((((((((((((((.
                                ,((((((((((((((,
${RESET}"
  echo -e "                         ${GREEN}Rocky Linux${RESET} ${CYAN}RADS FOREST${RESET} ${YELLOW}Builder${RESET}"

  sleep 2
}

# ========= INTERNET CONNECTIVITY CHECK =========
check_internet_connectivity() {
  dialog --title "Network Test" --infobox "Checking internet connectivity..." 5 50
  sleep 2

  local dns_test="FAILED"
  local ip_test="FAILED"

  if ping -c 1 -W 2 google.com &>/dev/null; then
    dns_test="SUCCESS"
  fi

  if ping -c 1 -W 2 8.8.8.8 &>/dev/null; then
    ip_test="SUCCESS"
  fi

  dialog --title "Connectivity Test Results" --infobox "DNS Resolution: $dns_test
Direct IP (8.8.8.8): $ip_test " 7 50
  sleep 4

  if [[ "$dns_test" == "FAILED" || "$ip_test" == "FAILED" ]]; then
    dialog --title "Network Warning" --yesno "Internet connectivity issues detected. Do you want to continue?" 7 50
    if [[ $? -ne 0 ]]; then
      exit 1
    fi
  fi
}

# ========= HOSTNAME VALIDATION =========
validate_and_set_hostname() {
  local current_hostname
  current_hostname=$(hostname)

  if [[ "$current_hostname" == "localhost.localdomain" ]]; then
    while true; do
      NEW_HOSTNAME=$(dialog --title "Hostname Configuration" --inputbox \
        "Current hostname is '$current_hostname'. Please enter a new FQDN (e.g., server.example.com):" \
        8 60 3>&1 1>&2 2>&3)

      if validate_fqdn "$NEW_HOSTNAME" && check_hostname_in_domain "$NEW_HOSTNAME"; then
        hostnamectl set-hostname "$NEW_HOSTNAME"
        dialog --title "Hostname Set" --msgbox "Hostname updated to: $NEW_HOSTNAME" 6 50
        break
      else
        dialog --title "Invalid Hostname" --msgbox "Invalid hostname. Please try again." 6 50
      fi
    done
  else
    # Show a temporary info box with current hostname, no OK button
    dialog --title "Hostname Check" --infobox \
      "Hostname set to: $current_hostname" 6 60
    sleep 3
  fi
}

# ========= SHOW CHECKLIST TO USER =========

show_ad_server_checklist() {
  dialog --title "First AD Server Installation Checklist" --msgbox "\
*********************************************

This will Install the FIRST AD Server and build a new Forest/Domain

Checklist:
Before the Installer starts, please make sure you have the following information:

  1. An Administrator password that you want to use for the new DOMAIN
  2. An NTP Subnet for your clients. This server will provide synchronized time
  3. The beginning and ending lease range for DHCP (optional)
  4. The client default gateway IP Address for the DHCP Scope (optional)
  5. A Friendly name as a description to the DHCP scope created (optional)

*********************************************" 20 100
}


# ========= ASK FOR DOMAIN PASSWORD CREATION =========
TMP_FILE=$(mktemp)

show_password_requirements() {
  dialog --title "Administrator Password Requirements" --msgbox \
"Please create the DOMAIN password for the Administrator Account

Your password must meet the following criteria:

- At least 8 characters
- At least 1 special character (!@#\$%^&)
- At least 1 uppercase letter
- At least 1 lowercase letter
- At least 1 number" 15 90
}

validate_admin_password() {
  local password="$1"

  if [ ${#password} -lt 8 ]; then
    echo "Password is too short (minimum 8 characters)."
    return 1
  fi
  if ! [[ "$password" =~ [0-9] ]]; then
    echo "Password must include at least one number."
    return 1
  fi
  if ! [[ "$password" =~ [\!\@\#\$\%\^\&\*] ]]; then
    echo "Password must include at least one special character (!@#\$%^&*)."
    return 1
  fi
  if ! [[ "$password" =~ [A-Z] && "$password" =~ [a-z] ]]; then
    echo "Password must contain both uppercase and lowercase letters."
    return 1
  fi

  return 0
}

prompt_admin_password() {
  show_password_requirements

  while true; do
    dialog --insecure --passwordbox "Enter Administrator Password:" 10 60 2> "$TMP_FILE"
    ADMINPASS=$(<"$TMP_FILE")

    if [ -z "$ADMINPASS" ]; then
      dialog --msgbox "Password cannot be blank. Please try again." 6 50
      continue
    fi

    error=$(validate_admin_password "$ADMINPASS" 2>&1)
    if ! validate_admin_password "$ADMINPASS"; then
      dialog --msgbox "$error" 8 60
      continue
    fi

    dialog --insecure --passwordbox "Confirm Administrator Password:" 10 60 2> "$TMP_FILE"
    VERIFYPASS=$(<"$TMP_FILE")

    if [ -z "$VERIFYPASS" ]; then
      dialog --msgbox "Confirmation cannot be blank. Please try again." 6 50
      continue
    fi

    if [ "$ADMINPASS" = "$VERIFYPASS" ]; then
      dialog --infobox "Password accepted and saved." 5 40
      sleep 2
      break
    else
      dialog --msgbox "Passwords do not match. Please try again." 6 50
    fi
  done

  export ADMINPASS
  rm -f "$TMP_FILE"
}

# ========= CONFIGURE CHRONY =========
declare -a ADDR
LOG_NTP="/tmp/chrony_ntp_configure.log"
touch "$LOG_NTP"

log_ntp() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $*" >> "$LOG_NTP"
}

validate_cidr() {
    [[ "$1" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$ ]]
}

prompt_ntp_servers() {
    while true; do
        NTP_SERVERS=$(dialog --title "Chrony NTP Configuration" \
            --inputbox "Enter up to 3 comma-separated NTP server IPs or FQDNs:" 8 60 \
            3>&1 1>&2 2>&3)
        exit_status=$?
        if [ $exit_status -eq 1 ] || [ $exit_status -eq 255 ]; then
            return 1
        fi

        if [[ -n "$NTP_SERVERS" ]]; then
            IFS=',' read -ra ADDR <<< "$NTP_SERVERS"
            if (( ${#ADDR[@]} > 3 )); then
                dialog --title "Chrony NTP Configuration" --msgbox "You may only enter up to 3 servers." 6 50
                continue
            fi
            return 0
        else
            dialog --title "Chrony NTP Configuration" --msgbox "The input cannot be blank. Please try again." 6 50
        fi
    done
}

prompt_allow_networks() {
    while true; do
        ALLOW_NET=$(dialog --title "Allow NTP Access" \
            --inputbox "Enter the CIDR range to allow NTP access (e.g., 192.168.1.0/24):" 8 60 \
            3>&1 1>&2 2>&3)
        exit_status=$?
        if [ $exit_status -ne 0 ]; then
            return 1
        fi

        if validate_cidr "$ALLOW_NET"; then
            return 0
        else
            dialog --msgbox "Invalid CIDR format. Please try again." 6 40
        fi
    done
}

update_chrony_config() {
    cp /etc/chrony.conf /etc/chrony.conf.bak
    sed -i '/^\(server\|pool\|allow\)[[:space:]]/d' /etc/chrony.conf

    for srv in "${ADDR[@]}"; do
        echo "server ${srv} iburst" >> /etc/chrony.conf
        log_ntp "Added server ${srv} to chrony.conf"
    done

    if [[ -n "$ALLOW_NET" ]]; then
        echo "allow $ALLOW_NET" >> /etc/chrony.conf
        log_ntp "Added allow $ALLOW_NET to chrony.conf"
    fi

    systemctl restart chronyd
    sleep 2
}

validate_time_sync() {
    local attempt=1
    local success=0

    while (( attempt <= 3 )); do
        dialog --title "Chrony NTP Configuration" --infobox "Validating time sync... Attempt $attempt/3" 4 50
        sleep 5

        TRACKING=$(chronyc tracking 2>&1)
        echo "$TRACKING" >> "$LOG_NTP"

        if echo "$TRACKING" | grep -q "Leap status[[:space:]]*:[[:space:]]*Normal"; then
            success=1
            break
        fi
        ((attempt++))
    done

    if [[ "$success" -eq 1 ]]; then
        dialog --title "Chrony NTP Configuration" --msgbox "Time synchronized successfully:\n\n$TRACKING" 15 100
    else
        dialog --title "Chrony NTP Configuration" --yesno "Time sync failed after 3 attempts.\nDo you want to proceed anyway?" 8 100
        [[ $? -eq 0 ]] || return 1
    fi
    return 0
}

# ========= SYSTEM UPDATE & PACKAGE INSTALL =========
update_and_install_packages() {
  # Simulate progress while enabling EPEL and CRB
  dialog --title "Repository Setup" --gauge "Enabling EPEL and CRB repositories..." 10 60 0 < <(
    (
      (
        dnf install -y epel-release >/dev/null 2>&1
        dnf config-manager --set-enabled crb >/dev/null 2>&1
      ) &
      PID=$!
      PROGRESS=0
      while kill -0 "$PID" 2>/dev/null; do
        echo "$PROGRESS"
        echo "XXX"
        echo "Enabling EPEL and CRB..."
        echo "XXX"
        ((PROGRESS += 5))
        if [[ $PROGRESS -ge 95 ]]; then
          PROGRESS=5
        fi
        sleep 0.5
      done
      echo "100"
      echo "XXX"
      echo "Repositories enabled."
      echo "XXX"
    )
  )

  dialog --title "System Update" --infobox "Checking for updates. This may take a few moments..." 5 70
  sleep 2

  dnf check-update -y &>/dev/null

  TEMP_FILE=$(mktemp)
  dnf check-update | awk '{print $1}' | grep -vE '^$|Obsoleting|Last' | awk -F'.' '{print $1}' | sort -u > "$TEMP_FILE"

  PACKAGE_LIST=($(cat "$TEMP_FILE"))
  TOTAL_PACKAGES=${#PACKAGE_LIST[@]}

  if [[ "$TOTAL_PACKAGES" -eq 0 ]]; then
    dialog --title "System Update" --msgbox "No updates available!" 6 50
    rm -f "$TEMP_FILE"
  else
    PIPE=$(mktemp -u)
    mkfifo "$PIPE"
    dialog --title "System Update" --gauge "Installing updates..." 10 70 0 < "$PIPE" &
    exec 3>"$PIPE"
    COUNT=0
    for PACKAGE in "${PACKAGE_LIST[@]}"; do
      ((COUNT++))
      PERCENT=$(( (COUNT * 100) / TOTAL_PACKAGES ))
      echo "$PERCENT" > "$PIPE"
      echo "XXX" > "$PIPE"
      echo "Updating: $PACKAGE" > "$PIPE"
      echo "XXX" > "$PIPE"
      dnf -y install "$PACKAGE" >/dev/null 2>&1
    done
    exec 3>&-
    rm -f "$PIPE" "$TEMP_FILE"
  fi

  dialog --title "Package Installation" --infobox "Installing Required Packages..." 5 50
  sleep 2
  PACKAGE_LIST=("ntsysv" "iptraf" "nano" "openldap-clients" "fail2ban" "tuned" "createrepo" "cockpit" "cockpit-storaged" "mock" "cockpit-files" "net-tools" "dmidecode" "ipcalc" "bind-utils"  "iotop" "zip" "yum-utils" "nano" "curl" "wget" "dnf-automatic" "dnf-plugins-core" "util-linux")
  TOTAL_PACKAGES=${#PACKAGE_LIST[@]}

  PIPE=$(mktemp -u)
  mkfifo "$PIPE"
  dialog --title "Installing Required Packages" --gauge "Preparing to install packages..." 10 70 0 < "$PIPE" &
  exec 3>"$PIPE"
  COUNT=0
  for PACKAGE in "${PACKAGE_LIST[@]}"; do
    ((COUNT++))
    PERCENT=$(( (COUNT * 100) / TOTAL_PACKAGES ))
    echo "$PERCENT" > "$PIPE"
    echo "XXX" > "$PIPE"
    echo "Installing: $PACKAGE" > "$PIPE"
    echo "XXX" > "$PIPE"
    dnf -y install "$PACKAGE" >/dev/null 2>&1
  done
  exec 3>&-
  rm -f "$PIPE"
  dialog --title "Installation Complete" --infobox "All packages installed successfully!" 6 50
  sleep 3
}
#===========DETECT VIRT and INSTALL GUEST=============
# Function to show a dialog infobox
vm_detection() {
show_info() {
    dialog --title "$1" --infobox "$2" 5 60
    sleep 2
}

# Function to show a progress bar during installation
show_progress() {
    (
        echo "10"; sleep 1
        echo "40"; sleep 1
        echo "70"; sleep 1
        echo "100"
    ) | dialog --title "$1" --gauge "$2" 7 60 0
}

# Detect virtualization platform
HWKVM=$(dmidecode | grep -i -e manufacturer -e product -e vendor | grep KVM | cut -c16-)
HWVMWARE=$(dmidecode | grep -i -e manufacturer -e product -e vendor | grep Manufacturer | grep "VMware, Inc." | cut -c16- | cut -d , -f1)

show_info "Virtualization Check" "Checking for virtualization platform..."

# Install guest agent for KVM
if [ "$HWKVM" = "KVM" ]; then
    show_info "Platform Detected" "KVM platform detected.\nInstalling qemu-guest-agent..."
    show_progress "Installing qemu-guest-agent" "Installing guest tools for KVM..."
    dnf -y install qemu-guest-agent &>/dev/null
fi

# Install guest agent for VMware
if [ "$HWVMWARE" = "VMware" ]; then
    show_info "Platform Detected" "VMware platform detected.\nInstalling open-vm-tools..."
    show_progress "Installing open-vm-tools" "Installing guest tools for VMware..."
    dnf -y install open-vm-tools &>/dev/null
fi
}
configure_dhcp_server() {
  dialog --title "DHCP Server Setup" --yesno \
  "Would you like to install and configure a DHCP Server with a default scope?" 8 60
  if [[ $? -ne 0 ]]; then
    return 0
  fi

  DHCPNSNAME=$(hostname | sed 's/^[^.:]*[.:]//')

  # Progress gauge for DHCP package install
  PACKAGE_LIST=("dhcp-server")
  PIPE=$(mktemp -u)
  mkfifo "$PIPE"
  dialog --title "Installing DHCP Server" --gauge "Preparing..." 10 60 0 < "$PIPE" &
  exec 3>"$PIPE"
  for PACKAGE in "${PACKAGE_LIST[@]}"; do
    echo "XXX" > "$PIPE"
    echo "Installing: $PACKAGE" > "$PIPE"
    echo "XXX" > "$PIPE"
    dnf -y install "$PACKAGE" >/dev/null 2>&1
    echo "100" > "$PIPE"
  done
  exec 3>&-
  rm -f "$PIPE"
  sleep 1

  firewall-cmd --zone=public --add-service=dhcp --permanent >/dev/null
  firewall-cmd --reload >/dev/null

  # Detect active interface
  active_interface=$(nmcli -t -f DEVICE,STATE device status | grep ':connected' | cut -d: -f1 | head -n 1)
  if [ -z "$active_interface" ]; then
    dialog --msgbox "No active interface found." 6 40
    return 1
  fi

  inet4_line=$(nmcli -g IP4.ADDRESS device show "$active_interface" | head -n 1)
  if [ -z "$inet4_line" ]; then
    dialog --msgbox "No IPv4 address found on $active_interface." 6 50
    return 1
  fi

  INET4=$(echo "$inet4_line" | cut -d'/' -f1)
  DHCPCIDR=$(echo "$inet4_line" | cut -d'/' -f2)

  # IP helper functions
  ipToNumber() {
    local ip=$1; IFS=. read -r o1 o2 o3 o4 <<< "$ip"
    echo $(( (o1 << 24) + (o2 << 16) + (o3 << 8) + o4 ))
  }

  calculateNetworkAddress() {
    local ip=$1 cidr=$2
    local mask=$(( 0xFFFFFFFF << (32 - cidr) ))
    local ipnum=$(ipToNumber "$ip")
    local netnum=$(( ipnum & mask ))
    echo "$(( (netnum >> 24) & 0xFF )).$(( (netnum >> 16) & 0xFF )).$(( (netnum >> 8) & 0xFF )).$(( netnum & 0xFF ))"
  }

  calculateBroadcastAddress() {
    local ip=$1 cidr=$2
    local mask=$(( 0xFFFFFFFF << (32 - cidr) ))
    local ipnum=$(ipToNumber "$ip")
    local broadcastnum=$(( ipnum | ~mask ))
    echo "$(( (broadcastnum >> 24) & 0xFF )).$(( (broadcastnum >> 16) & 0xFF )).$(( (broadcastnum >> 8) & 0xFF )).$(( broadcastnum & 0xFF ))"
  }

  NETWORK=$(calculateNetworkAddress "$INET4" "$DHCPCIDR")
  BROADCAST=$(calculateBroadcastAddress "$INET4" "$DHCPCIDR")

  while true; do
    # Ask for DHCP range
    while true; do
      DHCPBEGIP=$(dialog --inputbox "Enter beginning IP of DHCP lease range (in $NETWORK):" 8 80 3>&1 1>&2 2>&3)
      [[ -z "$DHCPBEGIP" ]] && continue
      isValidIP "$DHCPBEGIP" || continue
      isIPInRange "$DHCPBEGIP" || continue
      break
    done

    while true; do
      DHCPENDIP=$(dialog --inputbox "Enter ending IP of DHCP lease range (in $NETWORK):" 8 80 3>&1 1>&2 2>&3)
      [[ -z "$DHCPENDIP" ]] && continue
      isValidIP "$DHCPENDIP" || continue
      isIPInRange "$DHCPENDIP" || continue
      break
    done

    while true; do
      DHCPNETMASK=$(dialog --inputbox "Enter netmask for clients (e.g., 255.255.255.0):" 8 80 3>&1 1>&2 2>&3)
      [[ -z "$DHCPNETMASK" ]] && continue
      isValidNetmask "$DHCPNETMASK" && break
    done

    while true; do
      DHCPDEFGW=$(dialog --inputbox "Enter default gateway for clients:" 8 80 3>&1 1>&2 2>&3)
      [[ -z "$DHCPDEFGW" ]] && continue
      isValidIP "$DHCPDEFGW" && break
    done

    SUBNETDESC=$(dialog --inputbox "Enter a friendly name/description for this subnet:" 8 80 3>&1 1>&2 2>&3)

    # Show summary
    dialog --title "DHCP Configuration Summary" --yesno \
"Subnet:        $NETWORK
Begin IP:       $DHCPBEGIP
End IP:         $DHCPENDIP
Netmask:        $DHCPNETMASK
Gateway:        $DHCPDEFGW
Description:    $SUBNETDESC

Are these settings correct?" 15 60

    [[ $? -eq 0 ]] && break
    dialog --msgbox "Let's try again..." 5 40
  done

  dialog --infobox "Creating DHCP configuration..." 5 50
  sleep 1

  mv /etc/dhcp/dhcpd.conf /etc/dhcp/dhcpd.conf.orig 2>/dev/null

  cat <<EOF >/etc/dhcp/dhcpd.conf
authoritative;
allow unknown-clients;
option ntp-servers ${INET4};
option time-servers ${INET4};
option domain-name-servers ${INET4};
option domain-name "${DHCPNSNAME}";
option domain-search "${DHCPNSNAME}";

# ${SUBNETDESC}
subnet ${NETWORK} netmask ${DHCPNETMASK} {
        range ${DHCPBEGIP} ${DHCPENDIP};
        option subnet-mask ${DHCPNETMASK};
        option routers ${DHCPDEFGW};
}
EOF

  dialog --infobox "Starting DHCP service..." 5 50
  systemctl enable dhcpd >/dev/null 2>&1
  systemctl start dhcpd
  sleep 2

  if systemctl is-active --quiet dhcpd; then
    dialog --msgbox "The DHCP service is running." 6 50
  else
    dialog --msgbox "The DHCP service is NOT running.\nPlease validate your configuration before expecting DHCP to service clients." 8 60
  fi
}
#===========SET SELINUX=============
configure_selinux() {
  dialog --title "SELinux Configuration" --infobox "Applying SELinux settings for Samba..." 5 50
  setsebool -P samba_create_home_dirs=on \
             samba_domain_controller=on \
             samba_enable_home_dirs=on \
             samba_portmapper=on \
             use_samba_home_dirs=on
sleep2
}
#===========CONFGIURE FIREWALL=============
configure_firewall() {
  dialog --title "Firewall Configuration" --infobox "Applying firewall rules for AD services..." 5 60
  firewall-cmd --permanent --add-service=samba-dc >/dev/null
  firewall-cmd --permanent --add-service=ldaps >/dev/null
  firewall-cmd --permanent --add-service=ntp >/dev/null

  firewall-cmd --reload >/dev/null
  systemctl restart firewalld
 sleep 2
  # Extract enabled services
  FIREWALL_SERVICES=$(firewall-cmd --list-services 2>/dev/null)

  dialog --title "Firewall Status" --msgbox "These services are now open on the server:\n\n$FIREWALL_SERVICES\n\n" 12 60
}
#===========PROVISION SAMBA WITH MOCK=============
configure_samba_provisioning() {
  OSVER=$(grep -oE '[0-9]+\.[0-9]+' /etc/redhat-release)
  MAJOROS=$(cut -d. -f1 <<< "$OSVER")
  MINOROS=$(cut -d. -f2 <<< "$OSVER")

  DOMAIN=$(hostname | sed 's/^[^.:]*[.:]//' | sed -e 's/\(.*\)/\U\1/')
  ADDOMAIN=$(hostname | sed 's/^[^.:]*[.:]//' | cut -d. -f1 | sed -e 's/\(.*\)/\U\1/')

  dialog --title "Samba Source Build" --msgbox \
  "This step will download and compile Samba from source using 'mock'.\n\nThis may take up to 30 minutes." 10 60

  dnf download samba --source
  if ! ls /root/samba-*.rpm 1>/dev/null 2>&1; then
    dialog --msgbox "Samba source RPM failed to download. Check your network." 8 50
    return 1
  fi

  MOCKSMBVER=$(dnf provides samba | grep samba | sed '2,4d' | cut -d: -f1 | cut -dx -f1)
  MOCKCMD="mock -r rocky-${MAJOROS}-x86_64 --enablerepo=devel --define 'dist .el${MAJOROS}_${MINOROS}.dc' --with dc ${MOCKSMBVER}src.rpm"

  TMPLOG=$(mktemp)
  PIPE=$(mktemp -u)
  mkfifo "$PIPE"

  # Launch mock inside a pseudo-terminal using `script`
  script -q -c "$MOCKCMD" /dev/null > "$PIPE" 2>&1 &
  MOCKPID=$!

  dialog --title "Building Samba with Mock (Live)" --programbox 25 150 < "$PIPE"

  wait $MOCKPID
  rm -f "$PIPE"

  if ! ls /var/lib/mock/rocky-${MAJOROS}-x86_64/result/*.rpm &>/dev/null; then
    dialog --title "Mock Build Failed" --msgbox "Build failed. Check logs manually." 8 60
    return 1
  fi

  mkdir -p /root/.samba
  cp /var/lib/mock/rocky-${MAJOROS}-x86_64/result/*.rpm /root/.samba
  createrepo /root/.samba
  dnf config-manager --add-repo /root/.samba
  dnf -y install --nogpgcheck samba-dc samba-client krb5-workstation samba \
    --repofrompath=samba,/root/.samba \
    --enablerepo=samba >/dev/null

  mv -f /etc/samba/smb.conf /etc/samba/smb.bak.orig

  output=$(samba-tool domain provision \
    --realm="$DOMAIN" \
    --domain="$ADDOMAIN" \
    --adminpass="$ADMINPASS" 2>&1)

  echo "$output"

  if echo "$output" | grep -q "ERROR"; then
    dialog --msgbox "Provisioning failed. Check output." 8 60
    return 1
  fi

  dialog --msgbox "Samba AD Domain provisioned successfully." 7 50
  return 0
}
#===========CREATE KDC=============
create_kdc_conf() {
  KRB5_SRC="/var/lib/samba/private/krb5.conf"
  KRB5_DEST="/etc/krb5.conf"

  if [[ ! -f "$KRB5_SRC" ]]; then
    dialog --title "KDC Error" --msgbox "Kerberos configuration file not found at $KRB5_SRC.\nProvisioning may have failed. Exiting..." 8 60
    exit 1
  fi

  dialog --title "Creating KDC" --infobox "Copying Kerberos configuration to $KRB5_DEST..." 5 60
  sleep 2
  \cp -rf "$KRB5_SRC" "$KRB5_DEST"

  if [[ $? -eq 0 ]]; then
    dialog --infobox "Kerberos configuration successfully copied." 6 50
    sleep 2
  else
    dialog --msgbox "Failed to copy Kerberos configuration. Please check permissions." 6 60
    sleep 2
  fi
}

#===========SET DNS to ITSELF=============
set_local_dns_resolver() {
  IP=$(hostname -I | awk '{print $1}')  # Get first IP address
  INTERFACE=$(nmcli -t -f DEVICE,STATE dev | awk -F: '$2=="connected" {print $1}' | head -n1)

  if [[ -z "$IP" || -z "$INTERFACE" ]]; then
    dialog --msgbox "Failed to detect IP or active interface. Cannot set DNS." 8 50
    return 1
  fi

  dialog --title "Setting DNS Resolver" --infobox \
  "Configuring ${INTERFACE} to use ${IP} as its primary DNS resolver..." 5 80
  sleep 2

  nmcli con mod "$INTERFACE" ipv4.dns "$IP"
  systemctl restart NetworkManager

  if [[ $? -eq 0 ]]; then
    dialog --infobox "DNS resolver successfully set to ${IP} on ${INTERFACE}." 6 80
    sleep 2
  else
    dialog --msgbox "Failed to apply DNS resolver configuration." 6 50
    return 1
  fi
}

#===========ADD FREERADIUS SUPPORT=============
add_freeradius_support() {
  SMB_CONF="/etc/samba/smb.conf"

  if [[ ! -f "$SMB_CONF" ]]; then
    dialog --title "FreeRADIUS Error" --msgbox "$SMB_CONF not found. Please verify Samba is installed." 7 60
    exit 1
  fi

  dialog --title "FreeRADIUS Integration" --infobox "Adding default FreeRADIUS support to smb.conf..." 5 60
  sleep 2

  sed -i '8i \       \ #Added for FreeRADIUS Support' "$SMB_CONF"
  sed -i '9i \       \ ntlm auth = mschapv2-and-ntlmv2-only' "$SMB_CONF"
  sed -i '10i \       \\#ldap server require strong auth = no #UNCOMMENT THIS IF YOU NEED PLAIN LDAP BIND (non-TLS)' "$SMB_CONF"

  dialog --infobox "FreeRADIUS options successfully added to smb.conf." 6 60
  sleep 2
}
#===========ADD DNF-SMB-MON CRON JOB=============
add_dnf_smb_mon_cron() {
  MONITOR_SCRIPT="/root/ADDCInstaller/dnf-smb-mon"
  DEST_BIN="/usr/bin/dnf-smb-mon"

  if [[ ! -f "$MONITOR_SCRIPT" ]]; then
    dialog --title "Cron Job Error" --msgbox "$MONITOR_SCRIPT not found. Cannot configure cron job." 7 80
    exit 1
  fi

  dialog --title "Configuring Repo Monitor" --infobox "Installing dnf-smb-mon and setting up cron job..." 5 80
  sleep 2

  touch /var/log/dnf-smb-mon.log
  chmod 700 "$MONITOR_SCRIPT"
  \cp "$MONITOR_SCRIPT" "$DEST_BIN"

  (
    crontab -l 2>/dev/null
    echo "0 */6 * * * $DEST_BIN"
  ) | sort -u | crontab -

  systemctl restart crond
  dialog --infobox "dnf-smb-mon installed and cron job scheduled every 6 hours." 6 60
  sleep 2
}
#===========COPY SAMBA-DNF-PKG-UPDATE=============
copy_samba_dnf_pkg_update() {
  UPDATE_SCRIPT="/root/ADDCInstaller/samba-dnf-pkg-update"
  DEST_BIN="/usr/bin/samba-dnf-pkg-update"

  if [[ ! -f "$UPDATE_SCRIPT" ]]; then
    dialog --title "Copy Error" --msgbox "$UPDATE_SCRIPT not found. Cannot continue." 7 60
    exit 1
  fi

  dialog --title "Samba DNF Update" --infobox "Installing samba-dnf-pkg-update script..." 5 60
  sleep 2

  chmod 700 "$UPDATE_SCRIPT"
  \cp "$UPDATE_SCRIPT" "$DEST_BIN"

  dialog --infobox "samba-dnf-pkg-update successfully installed to /usr/bin." 6 60
  sleep 2
}
#===========ENABLE AND CHECK SAMBA DC SERVICE=============
enable_and_check_samba_service() {
  SERVICE_NAME="samba"

  # Check if the service exists
  if ! systemctl list-unit-files | grep -q "^${SERVICE_NAME}.service"; then
    dialog --title "Service Error" --msgbox "The service '${SERVICE_NAME}' was not found on this system.\nPlease ensure Samba is installed." 8 60
    exit 1
  fi

  # Enable and start the service
  dialog --title "Samba Service" --infobox "Enabling and starting the Samba service..." 5 60
  sleep 2
  systemctl enable "$SERVICE_NAME" --now

  # Check service status
  samba_status=$(systemctl is-active "$SERVICE_NAME")
  if [[ "$samba_status" = "active" ]]; then
    dialog --title "Samba Service" --infobox "Samba service is running." 5 40
  else
    dialog --title "Samba Error" --msgbox "Samba service is NOT running.\nStatus: $samba_status" 7 50
    exit 1
  fi
  sleep 2
}
#===========UPDATE ISSUE FILE============
update_issue_file() {
  rm -rf /etc/issue
  touch /etc/issue
  cat <<EOF >/etc/issue
\S
Kernel \r on an \m
Hostname: \n
IP Address: \4
EOF
}
#===========SAMBA LDAPS CERT SETUP=============
setup_samba_ldaps_cert() {
  TLS_DIR="/var/lib/samba/private/tls"
  CERT="$TLS_DIR/samba.crt"
  KEY="$TLS_DIR/samba.key"
  CA="$TLS_DIR/ca.crt"
  SMB_CONF="/etc/samba/smb.conf"
  LOG="/var/log/samba-ldap-cert-setup.log"

  FQDN=$(hostname -f)
  IPADDR=$(hostname -I | awk '{print $1}')

  mkdir -p "$TLS_DIR"

  dialog --title "Samba TLS Setup" --infobox "Generating Samba LDAPS certificate for $FQDN with IP $IPADDR..." 6 60
  sleep 2

  SAN_CONF=$(mktemp)
  cat > "$SAN_CONF" <<EOF
[req]
distinguished_name = req_distinguished_name
x509_extensions = v3_req
prompt = no

[req_distinguished_name]
CN = $FQDN

[v3_req]
keyUsage = keyEncipherment, dataEncipherment, digitalSignature
extendedKeyUsage = serverAuth
subjectAltName = @alt_names

[alt_names]
DNS.1 = $FQDN
IP.1 = $IPADDR
EOF

  openssl req -x509 -nodes -days 3650 -newkey rsa:2048 \
    -keyout "$KEY" \
    -out "$CERT" \
    -config "$SAN_CONF" \
    -extensions v3_req >> "$LOG" 2>&1
  rm -f "$SAN_CONF"

  if [[ -f "$CERT" && -f "$KEY" ]]; then
    cp "$CERT" "$CA"
    chmod 600 "$CERT" "$CA" "$KEY"
    dialog --infobox "Certificate and key successfully created at $TLS_DIR" 6 60
    sleep 2
  else
    dialog --title "Certificate Error" --msgbox "Certificate or key was not created. Check $LOG for errors." 7 60
    return 1
  fi

  if ! grep -q "tls keyfile" "$SMB_CONF"; then
    dialog --title "Updating smb.conf" --infobox "Inserting TLS configuration into smb.conf..." 6 60
    sleep 2

    awk -v keyfile="$KEY" -v certfile="$CERT" -v cafile="$CA" '
    BEGIN { inserted=0 }
    /^\[global\]/ { print; in_global=1; next }
    in_global && /^\[/ {
      if (!inserted) {
        print "    # TLS configuration for LDAPS/StartTLS"
        print "    tls enabled = yes"
        print "    tls keyfile = " keyfile
        print "    tls certfile = " certfile
        print "    tls cafile = " cafile
        print "    ldap server require strong auth = yes"
        inserted = 1
      }
      in_global=0
    }
    { print }
    END {
      if (!inserted) {
        print "[global]"
        print "    tls enabled = yes"
        print "    tls keyfile = " keyfile
        print "    tls certfile = " certfile
        print "    tls cafile = " cafile
        print "    ldap server require strong auth = yes"
      }
    }
    ' "$SMB_CONF" > "$SMB_CONF.new" && mv "$SMB_CONF.new" "$SMB_CONF"
  fi

  dialog --title "Restarting Samba" --infobox "Restarting Samba to apply certificate configuration..." 6 60
  sleep 2
  systemctl restart samba

  # Validate that samba restarted successfully
  if systemctl is-active --quiet samba; then
    dialog --msgbox "Samba restarted and is running." 6 50
  else
    dialog --title "Samba Error" --msgbox "Samba failed to restart. Please check the service status manually." 7 60
    return 1
  fi
}
#===========LDAP BIND AND TEST=============
test_ldap_secure_connection() {
  LOG="/var/log/samba-ldap-cert-setup.log"
  IPADDR=$(hostname -I | awk '{print $1}')

  LDAP_ADMIN_DN=$(samba-tool user show Administrator | awk -F': ' '/^dn: / {print $2}')
  if [[ -z "$LDAP_ADMIN_DN" ]]; then
    dialog --title "LDAP Test Error" --msgbox "Failed to retrieve Administrator DN from samba-tool output." 7 60
    return 1
  fi

  LDAP_BASEDN=$(echo "$LDAP_ADMIN_DN" | grep -oE 'DC=[^,]+(,DC=[^,]+)*')

  dialog --infobox "Testing StartTLS on port 389..." 5 50
  sleep 2
  LDAPTLS_REQCERT=never \
  ldapsearch -x -H ldap://$IPADDR -ZZ \
    -D "$LDAP_ADMIN_DN" \
    -w "$ADMINPASS" \
    -b "$LDAP_BASEDN" dn >> "$LOG" 2>&1

  if grep -q "^dn: " "$LOG"; then
    dialog --infobox "✅ StartTLS (389) test passed." 5 50
    sleep 2
  else
    dialog --msgbox "❌ StartTLS (389) test failed — see $LOG for details." 7 60
  fi

  dialog --infobox "Testing LDAPS on port 636..." 5 50
  sleep 2
  LDAPTLS_REQCERT=never \
  ldapsearch -x -H ldaps://$IPADDR \
    -D "$LDAP_ADMIN_DN" \
    -w "$ADMINPASS" \
    -b "$LDAP_BASEDN" dn >> "$LOG" 2>&1

  if grep -q "^dn: " "$LOG"; then
    dialog --infobox "✅ LDAPS (636) test passed." 5 50
    sleep 2
  else
    dialog --msgbox "❌ LDAPS test failed — see $LOG for details." 7 60
  fi

  dialog --title "LDAP Secure Setup Complete" --msgbox "Both StartTLS and LDAPS were tested." 7 60
  return 0
}
#===========KERBEROS LOGIN AND TICKET CHECK=============
check_kerberos_ticket() {
  dialog --title "Kerberos Login" --infobox "Attempting Kerberos login using Administrator credentials..." 5 80
  sleep 2

  # Attempt kinit with password from variable
  echo "$ADMINPASS" | kinit Administrator 2>/tmp/kinit_error.log

  if [[ $? -ne 0 ]]; then
    ERROR_MSG=$(< /tmp/kinit_error.log)
    dialog --title "Kerberos Login Failed" --msgbox "Kerberos login failed:\n$ERROR_MSG" 10 80
    return 1
  fi

  # Run klist and capture output
  klist_output=$(klist 2>&1)

  if echo "$klist_output" | grep -q "Valid starting.*Service principal"; then
    dialog --title "Kerberos Login Success" --infobox "Kerberos ticket successfully acquired for Administrator.\n\nTicket Details:\n\n$klist_output" 20 80
    sleep 3
  else
    dialog --title "Kerberos Ticket Check Failed" --msgbox "Kerberos login succeeded, but no valid ticket found.\n\n$klist_output" 10 80
    return 1
  fi

  return 0
}
#===========AUTHENTICATED SAMBA LOGIN CHECK=============
check_smbclient_login() {
  dialog --title "SMB Login Test" --infobox "Attempting SMB connection to //localhost/netlogon as Administrator..." 5 80
  sleep 2

  smb_output=$(echo "$ADMINPASS" | smbclient //localhost/netlogon -UAdministrator -c 'ls' 2>&1)

  if echo "$smb_output" | grep -qE '^\s*\.\s+D\s+[0-9]+' && echo "$smb_output" | grep -qE '^\s*\.\.\s+D\s+[0-9]+'; then
    dialog --title "SMB Login Success" --infobox "Successfully authenticated and listed netlogon share." 5 60
    sleep 2
  else
    dialog --title "SMB Login Failed" --msgbox "SMB login failed or unexpected output.\n\n$smb_output" 15 70
    return 1
  fi

  return 0
}
#===========DNS SRV RECORD CHECK=============
check_dns_srv_records() {
  dialog --title "Checking DNS SRV Records" --infobox "Setting up query for SRV records..." 5 60
  sleep 2

  # Timeout-based host queries
  ldap_srv=$(timeout 5 host -t SRV _ldap._tcp."$DOMAIN")
  if [[ $? -ne 0 ]]; then
    dialog --title "DNS Query Timeout" --msgbox "Timed out while querying SRV record for LDAP." 8 60
    return 1
  fi

  kerberos_srv=$(timeout 5 host -t SRV _kerberos._udp."$DOMAIN")
  if [[ $? -ne 0 ]]; then
    dialog --title "DNS Query Timeout" --msgbox "Timed out while querying SRV record for Kerberos." 8 60
    return 1
  fi

  a_record=$(timeout 5 host -t A "$FQDN")
  if [[ $? -ne 0 ]]; then
    dialog --title "DNS Query Timeout" --msgbox "Timed out while querying A record for $FQDN." 8 60
    return 1
  fi

  get_srv_hostnames() {
    local srv_records=$1
    echo "$srv_records" | awk '{print $NF}' | sed 's/\.$//'  # Remove trailing period
  }

  ldap_hostnames=$(get_srv_hostnames "$ldap_srv")
  kerberos_hostnames=$(get_srv_hostnames "$kerberos_srv")

  check_any_hostnames_match() {
    local hostnames=$1
    local fqdn=$2
    for hn in $hostnames; do
      if [ "$hn" == "$fqdn" ]; then
        return 0
      fi
    done
    return 1
  }

  if check_any_hostnames_match "$ldap_hostnames" "$FQDN" || check_any_hostnames_match "$kerberos_hostnames" "$FQDN"; then
    dialog --title "DNS SRV Check Success" --infobox "Success: Hostname from SRV record matches.\n\nLDAP SRV: $ldap_srv\nKerberos SRV: $kerberos_srv\nA Record: $a_record" 15
 80
    sleep 4
  else
    samba_status=$(systemctl is-active samba)
    dns_entry=$(nmcli dev show | grep DNS)

    dialog --title "DNS SRV Record Check Failed" --msgbox "Error: No matching SRV hostnames.\n\nSamba status: $samba_status\n\nDNS entries:\n$dns_entry" 20 70
    return 1
  fi

  return 0
}
#===========ANONYMOUS LOGIN TEST=============
test_anonymous_login() {
  dialog --title "Anonymous SMB Login Test" --infobox "Testing anonymous login to the Samba server..." 5 60
  sleep 2

  output=$(smbclient -L localhost -N 2>&1)

  if echo "$output" | grep -q "Anonymous login successful"; then
    dialog --title "Anonymous Login Success" --infobox "Success: Anonymous login successful." 6 60
    sleep 2
  else
    dialog --title "Anonymous Login Failed" --msgbox "Error: Anonymous logins are not available.\n\n$output" 15 70
    return 1
  fi

  return 0
}

# ========= MAIN =========
show_welcome_screen
detect_active_interface
prompt_static_ip_if_dhcp
check_root_and_os
check_and_enable_selinux
check_internet_connectivity
validate_and_set_hostname
show_ad_server_checklist
prompt_admin_password
configure_dhcp_server
# === Set Time ===
if ! prompt_ntp_servers; then
    dialog --title "Chrony NTP Configuration" --msgbox "NTP configuration was cancelled." 6 40
    exit 1
fi

if ! prompt_allow_networks; then
    dialog --title "Chrony NTP Configuration" --msgbox "No network was allowed. Configuration cancelled." 6 50
    exit 1
fi

update_chrony_config

if ! validate_time_sync; then
    dialog --title "Chrony NTP Configuration" --msgbox "Chrony configuration aborted." 6 40
    exit 1
fi

dialog --title "Chrony NTP Configuration" --infobox "Chrony NTP configuration completed successfully." 4 50
sleep 3
#=== End Set time ===
update_and_install_packages
vm_detection
configure_selinux
configure_firewall
configure_samba_provisioning
create_kdc_conf
set_local_dns_resolver
add_freeradius_support
add_dnf_smb_mon_cron
copy_samba_dnf_pkg_update
enable_and_check_samba_service
update_issue_file
setup_samba_ldaps_cert
test_ldap_secure_connection
check_kerberos_ticket
check_dns_srv_records
check_smbclient_login
test_anonymous_login


